// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TitleRename.IntegrationTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Title Renamer Test", SourceFile="Features\\TitleRenamerTest.feature", SourceLine=0)]
    public partial class TitleRenamerTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TitleRenamerTest.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Title Renamer Test", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("General", SourceLine=2)]
        public virtual void General()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("General", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "FileName"});
                table1.AddRow(new string[] {
                            "aaa"});
                table1.AddRow(new string[] {
                            "bbb.xml"});
                table1.AddRow(new string[] {
                            "ccc.xsl"});
                table1.AddRow(new string[] {
                            "ddd.cs"});
#line 4
 testRunner.Given("directory \"/root\" contains files", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "FileName"});
                table2.AddRow(new string[] {
                            "aaa"});
                table2.AddRow(new string[] {
                            "test.xml"});
                table2.AddRow(new string[] {
                            "test_namespace.xsl"});
                table2.AddRow(new string[] {
                            "updated.xslt"});
#line 10
 testRunner.And("directory \"/root/internal\" contains files", ((string)(null)), table2, "And ");
#line hidden
#line 16
 testRunner.And("file \"/root/internal/test.xml\" contains", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test title=\"This Trisoft will be update" +
                        "d\">\r\n  <line1>Trisoft has been renamed to SDL Trisoft</line1>\r\n</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("file \"/root/internal/test_namespace.xsl\" contains", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test h:title=\"This Trisoft will be upda" +
                        "ted\" xmlns:h=\"http://www.w3.org/TR/html4/\">\r\n  <line1>Trisoft has been renamed t" +
                        "o SDL Trisoft</line1>\r\n</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("file \"/root/internal/updated.xslt\" contains", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test title=\"This SDL Trisoft will not b" +
                        "e updated\">\r\n  <line1>SDL Trisoft don\'t have to be changed SDL Trisoft</line1>\r\n" +
                        "</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.When("\"(?<!SDL )Trisoft\" is replaced by \"SDL Trisoft\" in directory \"/root/internal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "FileName"});
                table3.AddRow(new string[] {
                            "aaa"});
                table3.AddRow(new string[] {
                            "bbb.xml"});
                table3.AddRow(new string[] {
                            "ccc.xsl"});
                table3.AddRow(new string[] {
                            "ddd.cs"});
#line 38
 testRunner.Then("directory \"/root\" should contain", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "FileName"});
                table4.AddRow(new string[] {
                            "aaa"});
                table4.AddRow(new string[] {
                            "test.xml"});
                table4.AddRow(new string[] {
                            "test.xml.bak"});
                table4.AddRow(new string[] {
                            "test_namespace.xsl"});
                table4.AddRow(new string[] {
                            "test_namespace.xsl.bak"});
                table4.AddRow(new string[] {
                            "updated.xslt"});
#line 44
 testRunner.And("directory \"/root/internal\" should contain", ((string)(null)), table4, "And ");
#line hidden
#line 52
 testRunner.And("file \"/root/internal/test.xml.bak\" should contain", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test title=\"This Trisoft will be update" +
                        "d\">\r\n  <line1>Trisoft has been renamed to SDL Trisoft</line1>\r\n</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("file \"/root/internal/test.xml\" should contain", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test title=\"This SDL Trisoft will be up" +
                        "dated\">\r\n  <line1>SDL Trisoft has been renamed to SDL Trisoft</line1>\r\n</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And("file \"/root/internal/test_namespace.xsl.bak\" should contain", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test h:title=\"This Trisoft will be upda" +
                        "ted\" xmlns:h=\"http://www.w3.org/TR/html4/\">\r\n  <line1>Trisoft has been renamed t" +
                        "o SDL Trisoft</line1>\r\n</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("file \"/root/internal/test_namespace.xsl\" should contain", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test h:title=\"This SDL Trisoft will be " +
                        "updated\" xmlns:h=\"http://www.w3.org/TR/html4/\">\r\n  <line1>SDL Trisoft has been r" +
                        "enamed to SDL Trisoft</line1>\r\n</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("file \"/root/internal/updated.xslt\" should contain", "<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<test title=\"This SDL Trisoft will not b" +
                        "e updated\">\r\n  <line1>SDL Trisoft don\'t have to be changed SDL Trisoft</line1>\r\n" +
                        "</test>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("rest of the files should be unchanged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
